// !WITH_NEW_INFERENCE
fun Int.foo() : Boolean = true

fun foo() : Int {
    val s = ""
    val x = 1
    when (x) {
      is <!NI;INCOMPATIBLE_TYPES!><!INCOMPATIBLE_TYPES!>String<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      <!NI;USELESS_IS_CHECK!><!USELESS_IS_CHECK!>!is Int<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      <!NI;USELESS_IS_CHECK!><!USELESS_IS_CHECK!>is Any<!NI;USELESS_NULLABLE_CHECK!><!USELESS_NULLABLE_CHECK!>?<!><!><!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      <!NI;USELESS_IS_CHECK!><!USELESS_IS_CHECK!>is Any<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      <!NI;INCOMPATIBLE_TYPES!><!INCOMPATIBLE_TYPES!>s<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      1 -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      1 <!NI;OVERLOAD_RESOLUTION_AMBIGUITY!>+<!> <!NI;UNRESOLVED_REFERENCE!><!UNRESOLVED_REFERENCE!>a<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      in 1..<!NI;UNRESOLVED_REFERENCE!><!UNRESOLVED_REFERENCE!>a<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      !in 1..<!NI;UNRESOLVED_REFERENCE!><!UNRESOLVED_REFERENCE!>a<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
      else -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
    }

    return 0
}

val _type_test : Int = foo() // this is needed to ensure the inferred return type of foo()

fun test() {
  val x = 1;
  val s = "";

  when (x) {
    <!NI;INCOMPATIBLE_TYPES!><!INCOMPATIBLE_TYPES!>s<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
    <!NI;INCOMPATIBLE_TYPES!><!NI;DUPLICATE_LABEL_IN_WHEN!><!INCOMPATIBLE_TYPES!><!DUPLICATE_LABEL_IN_WHEN!>""<!><!><!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
    x -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
    1 -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
  }

  val z = 1

  when (z) {
    <!NI;ELSE_MISPLACED_IN_WHEN!><!ELSE_MISPLACED_IN_WHEN!>else<!><!> -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
    <!NI;UNREACHABLE_CODE!><!UNREACHABLE_CODE!>1 -> 2<!><!>
  }

  when (<!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>z<!><!>) {
    else -> <!NI;UNUSED_EXPRESSION!><!UNUSED_EXPRESSION!>1<!><!>
  }
}